!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
AUDIO_PATH	ws_client.c	42;"	d	file:
BINARY	ws_client.c	/^	BINARY,$/;"	e	enum:__anon2	file:
BLACK	print_color.h	6;"	d
BLINK	print_color.h	25;"	d
BLUE	print_color.h	14;"	d
BOLD	print_color.h	23;"	d
BROWN	print_color.h	12;"	d
BUFFSIZE	common.h	10;"	d
CC	Makefile	/^export CC=gcc$/;"	m
CFLAGS	Makefile	/^export CFLAGS= -g -lpthread -D_DEBUG -lwebsockets -lpthread -lcjson  -lbase64 -lm -ldl$/;"	m
CHEADERS	Makefile	/^CHEADERS = $(wildcard *.h)  $/;"	m
CLEAR	print_color.h	28;"	d
CLRLINE	print_color.h	29;"	d
COBJS	Makefile	/^COBJS = $(patsubst %.c, %, $(CSRCS))  $/;"	m
CPP	Makefile	/^export CPP=g++$/;"	m
CPPSRCS	Makefile	/^CPPSRCS = $(wildcard *.cpp)  $/;"	m
CSRCS	Makefile	/^CSRCS = $(wildcard *.c)  $/;"	m
CYAN	print_color.h	18;"	d
DEMO_PROTOCOL_COUNT	ws_client.c	/^    DEMO_PROTOCOL_COUNT$/;"	e	enum:demo_protocols	file:
GMT	ws_client.c	/^static char  GMT[40] = "0";$/;"	v	file:
GRAY	print_color.h	20;"	d
GREEN	print_color.h	10;"	d
HIDE	print_color.h	27;"	d
LIST	linklist.h	/^typedef struct LIST$/;"	s
LWS_DEFINE	ws_client.c	39;"	d	file:
L_BLACK	print_color.h	7;"	d
L_BLUE	print_color.h	15;"	d
L_CYAN	print_color.h	19;"	d
L_GREEN	print_color.h	11;"	d
L_PURPLE	print_color.h	17;"	d
L_RED	print_color.h	9;"	d
NONE	print_color.h	5;"	d
NUM	ws_client.c	/^	NUM$/;"	e	enum:__anon2	file:
NUMBER_OF_MEMBERS	common.h	/^	NUMBER_OF_MEMBERS,$/;"	e	enum:__anon4
OBJ	Makefile	/^OBJ = $(COBJS)$/;"	m
PROTOCOL_DUMB_INCREMENT	ws_client.c	/^    PROTOCOL_DUMB_INCREMENT,$/;"	e	enum:demo_protocols	file:
PROTOCOL_LWS_MIRROR	ws_client.c	/^    PROTOCOL_LWS_MIRROR,$/;"	e	enum:demo_protocols	file:
PURPLE	print_color.h	16;"	d
READABLE	common.h	/^	READABLE,$/;"	e	enum:__anon4
READ_1R	process.c	/^	READ_1R,$/;"	e	enum:__anon1	file:
READ_2R	process.c	/^	READ_2R,$/;"	e	enum:__anon1	file:
READ_3R	process.c	/^	READ_3R,$/;"	e	enum:__anon1	file:
READ_4R	process.c	/^	READ_4R,$/;"	e	enum:__anon1	file:
READ_INIT	process.c	/^	READ_INIT,$/;"	e	enum:__anon1	file:
RED	print_color.h	8;"	d
REVERSE	print_color.h	26;"	d
SHM_PATH	common.h	11;"	d
TEXT	ws_client.c	/^	TEXT,$/;"	e	enum:__anon2	file:
UNDERLINE	print_color.h	24;"	d
WHITE	print_color.h	21;"	d
WRITEABLE	common.h	/^	WRITEABLE,$/;"	e	enum:__anon4
WatchEID	ws_client.c	/^static char  WatchEID[40] = "0";$/;"	v	file:
WatchFamiGID	ws_client.c	/^static char  WatchFamiGID[40] = "0";$/;"	v	file:
WatchSID	ws_client.c	/^static char  WatchSID[40] = "0";\/\/WatchEID$/;"	v	file:
YELLOW	print_color.h	13;"	d
__COMMON_H__	common.h	2;"	d
__LINKLIST__	linklist.h	2;"	d
__PRINT_COLOR__	print_color.h	2;"	d
add_front_linkedlist	linklist.c	/^int add_front_linkedlist(linked_list_t * list_pointer,node_t data)$/;"	f
add_postition_spec_front_linkedlist	linklist.c	/^int add_postition_spec_front_linkedlist(linked_list_t * list_pointer,linked_list_t * position,node_t data)$/;"	f
add_postition_spec_rear_linkedlist	linklist.c	/^int add_postition_spec_rear_linkedlist(linked_list_t * list_pointer,linked_list_t * position,node_t data)$/;"	f
add_rear_linkedlist	linklist.c	/^int add_rear_linkedlist(linked_list_t *list_pointer,node_t * data,int lenth)$/;"	f
alter_linkedlist	linklist.c	/^int alter_linkedlist(linked_list_t * list_pointer,linked_list_t * position,node_t data)$/;"	f
buf_receve	ws_client.c	/^char buf_receve[320];$/;"	v
buff_to_recv	common.h	/^	volatile char 			buff_to_recv[BUFFSIZE];$/;"	m	struct:shm
buff_to_send	common.h	/^	volatile msg_send_t 	buff_to_send; \/\/ 从 ws client 发送 到 ws server 的数据$/;"	m	struct:shm
call_back_1R	process.c	/^void call_back_1R(void){$/;"	f
call_back_2R	process.c	/^void call_back_2R(void){$/;"	f
call_back_3R	process.c	/^void call_back_3R(void){$/;"	f
call_back_4R	process.c	/^void call_back_4R(void){$/;"	f
call_back_fun	process.c	/^call_back_fun_t call_back_fun[4] = {call_back_1R,call_back_2R,call_back_3R,call_back_4R};$/;"	v
call_back_fun_t	process.c	/^typedef void (*call_back_fun_t)(void);$/;"	t	file:
callback_dumb_increment	ws_client.c	/^callback_dumb_increment(struct lws *wsi, enum lws_callback_reasons reason,$/;"	f	file:
cid_send	ws_client.c	/^static int cid_send = 0;$/;"	v	file:
cjson_to_send	ws_client.c	/^char * cjson_to_send = NULL;$/;"	v
cond_main	ws_client.c	/^pthread_cond_t  cond_main,cond_write;$/;"	v
cond_write	ws_client.c	/^pthread_cond_t  cond_main,cond_write;$/;"	v
connection_flag	ws_client.c	/^static int connection_flag = 0;$/;"	v	file:
context	common.h	/^	char context[4096];$/;"	m	struct:__anon5
context	linklist.h	/^	char context [30];$/;"	m	struct:__anon3
context	ws_client.c	/^    struct lws_context *context;$/;"	m	struct:pthread_routine_tool	typeref:struct:pthread_routine_tool::lws_context	file:
create_linkedlist	linklist.c	/^linked_list_t * create_linkedlist(void)$/;"	f
crl_path	ws_client.c	/^char crl_path[1024] = "";$/;"	v
data	linklist.h	/^	node_t data;$/;"	m	struct:LIST
del_front_linkedlist	linklist.c	/^node_t * del_front_linkedlist(linked_list_t * list_pointer,node_t * data_pointer)$/;"	f
del_position_spec_linkedlist	linklist.c	/^int del_position_spec_linkedlist(linked_list_t * list_pointer,linked_list_t * position)$/;"	f
del_rear_linkedlist	linklist.c	/^node_t * del_rear_linkedlist(linked_list_t * list_pointer,node_t * data_pointer)$/;"	f
delete_linklist_all	linklist.c	/^int delete_linklist_all(linked_list_t * list_pointer){$/;"	f
delete_linklist_but_head_node	linklist.c	/^int delete_linklist_but_head_node(linked_list_t * list_pointer){$/;"	f
demo_protocols	ws_client.c	/^enum demo_protocols$/;"	g	file:
deny_deflate	ws_client.c	/^static int deny_deflate, longlived, mirror_lifetime, test_post;$/;"	v	file:
destroy_flag	ws_client.c	/^static int destroy_flag = 0;$/;"	v	file:
exts	ws_client.c	/^static const struct lws_extension exts[] =$/;"	v	typeref:struct:lws_extension	file:
fifo_path	common.h	/^	char fifo_path[32];$/;"	m	struct:__anon5
fifo_path	linklist.h	/^	char fifo_path[32];$/;"	m	struct:__anon3
fifo_path	process.c	/^char fifo_path[32];$/;"	v
file_size	ws_client.c	/^int file_size(const char * filename)  $/;"	f
flag_no_mirror_traffic	ws_client.c	/^static int flag_no_mirror_traffic, justmirror;$/;"	v	file:
force_exit	ws_client.c	/^static volatile int force_exit;$/;"	v	file:
fun_main	process.c	/^void fun_main(const char *path){$/;"	f
gennerate_cjson	ws_client.c	/^static void gennerate_cjson(char **p)$/;"	f	file:
isnull	linklist.c	/^int isnull(linked_list_t * list_pointer)$/;"	f
justmirror	ws_client.c	/^static int flag_no_mirror_traffic, justmirror;$/;"	v	file:
key	linklist.h	/^	int key[3]; \/\/这个 key[0] 用于验证 2.R ,key[1] 用于验证 3.R key[2] 用于验证 4.R$/;"	m	struct:__anon3
key_1R	common.h	/^	int key_1R; $/;"	m	struct:__anon5
linked_list_t	linklist.h	/^}linked_list_t;$/;"	t	typeref:struct:LIST
list_h_pointer	ws_client.c	/^linked_list_t * list_h_pointer = NULL;$/;"	v
locate_linkedlist	linklist.c	/^linked_list_t * locate_linkedlist(linked_list_t * list_pointer,node_t * data, int lenth)$/;"	f
lock	common.h	/^	volatile pthread_rwlock_t lock;$/;"	m	struct:shm
longlived	ws_client.c	/^static int deny_deflate, longlived, mirror_lifetime, test_post;$/;"	v	file:
main	process.c	/^int main(int argc, const char *argv[]){$/;"	f
main	ws_client.c	/^int main(int argc, const char *argv[])$/;"	f
mirror_lifetime	ws_client.c	/^static int deny_deflate, longlived, mirror_lifetime, test_post;$/;"	v	file:
msg_info	common.h	/^	msg_info_t msg_info;\/\/同上$/;"	m	struct:__anon6
msg_info_t	common.h	/^} msg_info_t;$/;"	t	typeref:struct:__anon5
msg_send_t	common.h	/^} msg_send_t; \/\/ 这个类型 至少要包括数据节点的类型$/;"	t	typeref:struct:__anon6
mutex	ws_client.c	/^pthread_mutex_t mutex;$/;"	v
next	linklist.h	/^	struct LIST * next;$/;"	m	struct:LIST	typeref:struct:LIST::LIST
node	common.h	/^	node_t  node;  \/\/因为是共享内存中的东西,不能用A进程访问 B 进程 malloc 的东西,所以不用指针$/;"	m	struct:__anon6
node_t	linklist.h	/^} node_t;$/;"	t	typeref:struct:__anon3
options	ws_client.c	/^static struct option options[] =$/;"	v	typeref:struct:option	file:
opts	ws_client.c	/^static unsigned int opts, rl_multi[3];$/;"	v	file:
packet_come_flag	ws_client.c	/^static int packet_come_flag = 0;$/;"	v	file:
pid	common.h	/^	pid_t pid;$/;"	m	struct:__anon5
pid	linklist.h	/^	pid_t  pid;$/;"	m	struct:__anon3
pkt_send_format	ws_client.c	/^pkt_send_format_t pkt_send_format = NUM;$/;"	v
pkt_send_format_t	ws_client.c	/^} pkt_send_format_t;$/;"	t	typeref:enum:__anon2	file:
print_reverse_linkedlist	linklist.c	/^int print_reverse_linkedlist(linked_list_t * list_pointer)$/;"	f
print_sequence_linkedlist	linklist.c	/^int print_sequence_linkedlist(linked_list_t * list_pointer)$/;"	f
protocols	ws_client.c	/^static const struct lws_protocols protocols[] =$/;"	v	typeref:struct:lws_protocols	file:
pthid_del_linklist	ws_client.c	/^pthread_t   pthid_del_linklist;$/;"	v
pthid_insert	ws_client.c	/^pthread_t   pthid_insert;$/;"	v
pthread_routine_tool	ws_client.c	/^struct pthread_routine_tool$/;"	s	file:
ratelimit_connects	ws_client.c	/^static int ratelimit_connects(unsigned int *last, unsigned int secs)$/;"	f	file:
read_state	process.c	/^read_state_t read_state =  READ_INIT;$/;"	v
read_state_t	process.c	/^} read_state_t;$/;"	t	typeref:enum:__anon1	file:
rl_multi	ws_client.c	/^static unsigned int opts, rl_multi[3];$/;"	v	file:
sem	common.h	/^	volatile sem_t       			sem; \/\/这个不能用 volatile 修饰 ,修饰会报错 ,但不修饰会不会出现错误 \/\/TODO$/;"	m	struct:shm
sem_main	ws_client.c	/^sem_t       sem_main;$/;"	v
sem_write	ws_client.c	/^sem_t       sem_write;$/;"	v
shm	common.h	/^struct shm\/\/\/\/共享内存使用的结构体的声明 $/;"	s
shm_init	process.c	/^static int shm_init(void){$/;"	f	file:
shm_init	ws_client.c	/^static int shm_init(void){$/;"	f	file:
shm_state	common.h	/^    volatile shm_state_t 	shm_state; $/;"	m	struct:shm
shm_state_t	common.h	/^} shm_state_t;$/;"	t	typeref:enum:__anon4
shmid	process.c	/^int shmid;\/\/共享内存id定义$/;"	v
shmid	ws_client.c	/^int shmid;\/\/共享内存id定义$/;"	v
shms	process.c	/^struct shm *shms;\/\/结构体指针定义 $/;"	v	typeref:struct:shm
shms	ws_client.c	/^struct shm *shms;\/\/结构体指针定义 $/;"	v	typeref:struct:shm
show_http_content	ws_client.c	/^static void show_http_content(const char *p, size_t l)$/;"	f	file:
sig_handler	process.c	/^void sig_handler(int arg){$/;"	f
sig_handler	ws_client.c	/^void sig_handler(int arg){$/;"	f
test_post	ws_client.c	/^static int deny_deflate, longlived, mirror_lifetime, test_post;$/;"	v	file:
thread_del_list	ws_client.c	/^static void * thread_del_list(void *tool_in){$/;"	f	file:
thread_insert	ws_client.c	/^static void * thread_insert(void *arg){$/;"	f	file:
usage	process.c	/^void usage(void){$/;"	f
usage	ws_client.c	/^void usage(void){$/;"	f
websocket_write_back	ws_client.c	/^static int websocket_write_back(struct lws *wsi_in, char *str, int str_size_in)$/;"	f	file:
writeable_flag	ws_client.c	/^static int writeable_flag = 0;$/;"	v	file:
wsi	ws_client.c	/^    struct lws *wsi;$/;"	m	struct:pthread_routine_tool	typeref:struct:pthread_routine_tool::lws	file:
wsi_dumb	ws_client.c	/^static struct lws *wsi_dumb, *wsi_mirror;$/;"	v	typeref:struct:lws	file:
wsi_mirror	ws_client.c	/^static struct lws *wsi_dumb, *wsi_mirror;$/;"	v	typeref:struct:	file:
wsi_multi	ws_client.c	/^static struct lws *wsi_multi[3];$/;"	v	typeref:struct:lws	file:
xun_uint_to_char	ws_client.c	/^void xun_uint_to_char(unsigned int a ,unsigned char *tab,int len)$/;"	f
